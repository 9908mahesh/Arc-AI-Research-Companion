from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from io import BytesIO
from datetime import datetime

def create_summary_pdf(title: str, summary_text: str, citations: list):
    """
    Return bytes of a generated PDF containing summary + citations.
    citations: list of dicts {'source':..., 'page':..., 'snippet':...}
    """
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    margin = 40
    y = height - margin

    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y, title)
    y -= 28

    c.setFont("Helvetica", 11)
    for line in summary_text.splitlines():
        if y < 80:
            c.showPage()
            y = height - margin
            c.setFont("Helvetica", 11)
        c.drawString(margin, y, line[:110])
        y -= 14

    y -= 10
    c.setFont("Helvetica-Bold", 12)
    c.drawString(margin, y, "Citations")
    y -= 18
    c.setFont("Helvetica", 10)
    for i, cit in enumerate(citations, start=1):
        text = f"{i}. {cit.get('source','?')} (p. {cit.get('page','?')}): {cit.get('snippet','')[:150]}"
        if y < 80:
            c.showPage()
            y = height - margin
            c.setFont("Helvetica", 10)
        c.drawString(margin, y, text)
        y -= 12

    y -= 12
    c.setFont("Helvetica-Oblique", 8)
    c.drawString(margin, 40, f"Generated by Arc â€¢ {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%SZ')}")
    c.save()
    buffer.seek(0)
    return buffer.read()
